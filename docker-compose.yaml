version: '3.8'

services:
  db:
    image: postgres:14-alpine
    env_file: .env
    environment:
      POSTGRES_DB: ${NAME}
      POSTGRES_USER: ${USER}
      POSTGRES_PASSWORD: ${PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${USER} -d ${NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - backend_network

  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    networks:
      - backend_network

  backend:
    build: .
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    env_file: .env
    environment:
      - HOST=db   # Будет использовать 'db'
      - CELERY_BROKER_URL=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend_network

  celery:
    build: .
    command: celery -A config worker --loglevel=info
    env_file: .env
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend_network
    restart: unless-stopped

  celery_beat:
    build: .
    command: celery -A config beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file: .env
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
      - backend
    networks:
      - backend_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:  # Для постоянного хранения медиафайлов

networks:
  backend_network:
    driver: bridge
